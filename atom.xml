<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘永振的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hi-v.cn/"/>
  <updated>2018-07-14T09:04:17.121Z</updated>
  <id>http://blog.hi-v.cn/</id>
  
  <author>
    <name>刘永振</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>install-mysql-on-ubuntu</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/install-mysql-on-ubuntu.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/install-mysql-on-ubuntu.html</id>
    <published>2018-06-22T15:10:25.000Z</published>
    <updated>2018-07-14T09:04:17.121Z</updated>
    
    <content type="html"><![CDATA[<p>./bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><p>./bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data<br>[System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.11) initializing of server in progress as process 9442<br>[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: %bda6877ywnU<br>[System] [MY-013170] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.11) initializing of server has completed</p><p>echo “export PATH=$PATH:/usr/local/mysql/bin:/usr/local/mysql/sbin” &gt;&gt; /etc/profile</p><p>[~] apt-get install sysv-rc-conf<br>[~] sysv-rc-conf mysql.server on</p><p>vim my.cnf</p><p>[mysqld]                                            #服务端基本设置<br>port = 3306                                         #MySQL监听端口<br>basedir=/usr/local/mysql                            #使用该目录作为根目录（安装目录）<br>datadir=/usr/local/mysql/data                       #数据文件存放的目录<br>socket=/var/lib/mysql/mysql.sock                    #(默认)为MySQL客户端程序和服务器之间的本地通讯指定一个套接字文件<br>user=mysql                                          #MySQL启动用户<br>character_set_server = utf8mb4                      #服务端默认编码（数据库级别）<br>collation_server = utf8mb4_bin                      #服务端默认的比对规则，排序规则<br>pid-file=/var/run/mysqld/mysqld.pid                 #(默认)进程文件所在目录<br>log-error=/var/log/mysql/error.log                  #(默认)错误日志地址</p><p>sudo cp ./my.cnf /etc/mysql/my.cnf                  #copy至mysql的配置文件目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;./bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data&lt;/p&gt;
&lt;p&gt;./bin/mysqld –initialize –user=mysql
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://blog.hi-v.cn/tags/ubuntu/"/>
    
      <category term="mysql" scheme="http://blog.hi-v.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04下编译安装PHP7.2</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/install-php7-2-on-ubuntu.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/install-php7-2-on-ubuntu.html</id>
    <published>2018-06-22T13:21:47.000Z</published>
    <updated>2018-07-01T08:13:53.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>我们将压缩包下载到 /usr/local/src 目录下，进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src</span><br></pre></td></tr></table></figure></p><h3 id="1-下载-PHP"><a href="#1-下载-PHP" class="headerlink" title="1. 下载 PHP"></a>1. 下载 PHP</h3><blockquote><p>下载 PHP7.2.7:   wget <a href="http://cn2.php.net/distributions/php-7.2.7.tar.gz" target="_blank" rel="noopener">http://cn2.php.net/distributions/php-7.2.7.tar.gz</a></p></blockquote><h3 id="2-下载安装依赖"><a href="#2-下载安装依赖" class="headerlink" title="2. 下载安装依赖"></a>2. 下载安装依赖</h3><p>一般来说，这种需要源码编译安装的软件，安装之前需要准备好编译环境以及程序需要依赖的库。<br>首先我们准备编译环境，在 Ubuntu 16.04 LTS 中，默认并没有自带 C 和 C++ 的构建环境，我们安装一个叫 build-essential 的包即可，另外，PHP 还需要 bison re2c 和 pkg-config 才能安装，我们可以直接通过 apt 安装它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt install build-essential bison re2c pkg-config -y</span><br></pre></td></tr></table></figure></p><p>接下来需要准备 PHP-7.2.7 的依赖包，大部分我们都可以通过 apt 来安装，唯一有一点要注意的是，Ubuntu 16.04 LTS 镜像源的 libzip 版本太老了，我们需要手动下一个新版本，才能让 PHP 的 zip 扩展支持加密的 zip 文件的操作。</p><ul><li>安装依赖的命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt install build-essential bison re2c pkg-config libxml2-dev libbz2-dev libssl-dev libcurl4-openssl-dev libjpeg-dev libpng12-dev libfreetype6-dev libgmp-dev libreadline6-dev libxslt1-dev</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果安装过程提示类似于 Package *** is not available 时，要先更新一下源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get update</span><br></pre></td></tr></table></figure></p></blockquote><p>上面的安装依赖没有安装 libzip-dev ，接下来手动编译安装 libzip<br>如果没有用 PHP 来处理加密 zip 的需求的话，也可以直接用 apt 默认的 libzip 包，刚刚的命令没有带上，我们需要到 libzip 的官网下一个，编译的时候另外指定：<br>我们还是把它下载到 /usr/local/src 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src</span><br><span class="line"># wget https://libzip.org/download/libzip-1.5.1.tar.gz</span><br><span class="line"># tar -zxf libzip-1.5.1.tar.gz</span><br><span class="line"># cd libzip-1.5.1</span><br><span class="line"># mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><blockquote><p>最新版的libzip 需要 cmake，如果没有 cmake，可以使用以下的命令安装 cmake<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt install cmake</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>libzip 的安装说明，可参照源码包里的 INSTALL.md 文档，或者官网的 github 上的说明<br><a href="https://github.com/nih-at/libzip/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/nih-at/libzip/blob/master/INSTALL.md</a></p></blockquote><h2 id="二、-编译安装"><a href="#二、-编译安装" class="headerlink" title="二、 编译安装"></a>二、 编译安装</h2><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h3><p>接下来就是最重要的运行 ./configure 生成 makefile 了，不多说，直接上我调整好的套路。<br>如果没有下载源码的话，请将 –with-libzip=../libzip-1.5.1 \ 替换成 –with-libzip \ （注意 \ 之前一定有一个空格！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxf php-7.2.7.tar.gz</span><br><span class="line"># cd php-7.2.7</span><br><span class="line"># ./configure \</span><br><span class="line"> --prefix=/usr/local/php-7.2.7 \</span><br><span class="line"> --enable-fpm \</span><br><span class="line"> --with-fpm-user=www \</span><br><span class="line"> --with-fpm-group=www \</span><br><span class="line"> --enable-inline-optimization \</span><br><span class="line"> --disable-debug \</span><br><span class="line"> --disable-rpath \</span><br><span class="line"> --enable-shared \</span><br><span class="line"> --with-xmlrpc \</span><br><span class="line"> --with-pcre-regex \</span><br><span class="line"> --with-sqlite3 \</span><br><span class="line"> --with-zlib \</span><br><span class="line"> --enable-bcmath \</span><br><span class="line"> --with-iconv \</span><br><span class="line"> --with-bz2 \</span><br><span class="line"> --with-openssl \</span><br><span class="line"> --enable-calendar \</span><br><span class="line"> --with-curl \</span><br><span class="line"> --with-cdb \</span><br><span class="line"> --enable-dom \</span><br><span class="line"> --enable-exif \</span><br><span class="line"> --enable-fileinfo \</span><br><span class="line"> --enable-filter \</span><br><span class="line"> --with-pcre-dir \</span><br><span class="line"> --enable-ftp \</span><br><span class="line"> --with-gd \</span><br><span class="line"> --with-openssl-dir \</span><br><span class="line"> --with-jpeg-dir \</span><br><span class="line"> --with-png-dir \</span><br><span class="line"> --with-zlib-dir \</span><br><span class="line"> --with-freetype-dir \</span><br><span class="line"> --enable-gd-jis-conv \</span><br><span class="line"> --with-gettext \</span><br><span class="line"> --with-gmp \</span><br><span class="line"> --with-mhash \</span><br><span class="line"> --enable-json \</span><br><span class="line"> --enable-mbstring \</span><br><span class="line"> --enable-mbregex \</span><br><span class="line"> --enable-mbregex-backtrack \</span><br><span class="line"> --with-libmbfl \</span><br><span class="line"> --with-onig \</span><br><span class="line"> --enable-pdo \</span><br><span class="line"> --with-mysqli=mysqlnd \</span><br><span class="line"> --with-pdo-mysql=mysqlnd \</span><br><span class="line"> --with-pdo-sqlite \</span><br><span class="line"> --with-readline \</span><br><span class="line"> --enable-session \</span><br><span class="line"> --enable-shmop \</span><br><span class="line"> --enable-simplexml \</span><br><span class="line"> --enable-sockets \</span><br><span class="line"> --enable-sysvmsg \</span><br><span class="line"> --enable-sysvsem \</span><br><span class="line"> --enable-sysvshm \</span><br><span class="line"> --enable-wddx \</span><br><span class="line"> --with-libxml-dir \</span><br><span class="line"> --with-xsl \</span><br><span class="line"> --enable-zip \</span><br><span class="line"> --enable-mysqlnd-compression-support \</span><br><span class="line"> --with-pear \</span><br><span class="line"> --enable-opcache</span><br></pre></td></tr></table></figure></p><p>看到如下的提示，说明编译成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Generating files</span><br><span class="line">configure: creating ./config.status</span><br><span class="line">creating main/internal_functions.c</span><br><span class="line">creating main/internal_functions_cli.c</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| License:                                                           |</span><br><span class="line">| This software is subject to the PHP License, available in this     |</span><br><span class="line">| distribution in the file LICENSE.  By continuing this installation |</span><br><span class="line">| process, you are bound by the terms of this license agreement.     |</span><br><span class="line">| If you do not agree with the terms of this license, you must abort |</span><br><span class="line">| the installation process at this point.                            |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">Thank you for using PHP.</span><br><span class="line"></span><br><span class="line">config.status: creating php7.spec</span><br><span class="line">config.status: creating main/build-defs.h</span><br><span class="line">config.status: creating scripts/phpize</span><br><span class="line">config.status: creating scripts/man1/phpize.1</span><br><span class="line">config.status: creating scripts/php-config</span><br><span class="line">config.status: creating scripts/man1/php-config.1</span><br><span class="line">config.status: creating sapi/cli/php.1</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.conf</span><br><span class="line">config.status: creating sapi/fpm/www.conf</span><br><span class="line">config.status: creating sapi/fpm/init.d.php-fpm</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.service</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.8</span><br><span class="line">config.status: creating sapi/fpm/status.html</span><br><span class="line">config.status: creating sapi/cgi/php-cgi.1</span><br><span class="line">config.status: creating ext/phar/phar.1</span><br><span class="line">config.status: creating ext/phar/phar.phar.1</span><br><span class="line">config.status: creating main/php_config.h</span><br><span class="line">config.status: executing default commands</span><br></pre></td></tr></table></figure></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>在 PHP 源码目录，执行安装命令，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd php-7.2.7</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><blockquote><p>如果在make 过程出错的话，要执行一下 make clean 后再重新 make</p></blockquote><p>到这一步，PHP 已经安装成功了。</p><h2 id="三、-配置-PHP"><a href="#三、-配置-PHP" class="headerlink" title="三、 配置 PHP"></a>三、 配置 PHP</h2><h3 id="1-配置环境变量"><a href="#1-配置环境变量" class="headerlink" title="1. 配置环境变量"></a>1. 配置环境变量</h3><p>要在命令行里面直接通过 php 之类的命令直接运行 php ，我们需要将 bin 目录加入到系统的环境变量中，方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件最末尾加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/php-7.2.7/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></p><p>保存以后，执行 source /etc/profile 使环境变量生效。<br>测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure></p><p>配置无误的话我们可以得到这样的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP 7.2.7 (cli) (built: Jul  1 2018 14:15:54) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure></p><h3 id="2-配置-php-fpm"><a href="#2-配置-php-fpm" class="headerlink" title="2. 配置 php-fpm"></a>2. 配置 php-fpm</h3><p>增加 php-fpm 命令，需要复制源码包里的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/local/src/php-7.2.7/sapi/fpm/init.d.php-fpm /usr/local/bin/php-fpm</span><br><span class="line"># chmod +x /usr/local/bin/php-fpm</span><br></pre></td></tr></table></figure></p><h3 id="3-初始化-PHP-和-PHP-FPM-的配置"><a href="#3-初始化-PHP-和-PHP-FPM-的配置" class="headerlink" title="3. 初始化 PHP 和 PHP-FPM 的配置"></a>3. 初始化 PHP 和 PHP-FPM 的配置</h3><p>查看一下 php.ini 的配置目录，可以看到 php.ini 目录指向 /usr/local/php-7.2.7/lib<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># php -i | grep php.ini</span><br><span class="line">Configuration File (php.ini) Path =&gt; /usr/local/php-7.2.7/lib</span><br></pre></td></tr></table></figure></p><p>然后先把默认的配置拷贝一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/src/php-7.2.7/php.ini-production /usr/local/php-7.2.7/php.ini</span><br><span class="line">cp /usr/local/php-7.2.7/etc/php-fpm.conf.default /usr/local/php-7.2.7/etc/php-fpm.conf</span><br><span class="line">cp /usr/local/php-7.2.7/etc/php-fpm.d/www.conf.default /usr/local/php-7.2.7/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure></p><p>此时，已经可以用 php-fpm 命令来启动，关闭 php-fpm 了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># php-fpm start</span><br><span class="line">Starting php-fpm  done</span><br><span class="line"># ps aux|grep php-fpm</span><br><span class="line">root     12240  0.0  0.4 183532  8604 ?        Ss   21:13   0:00 php-fpm: master process (/usr/local/php-7.2.7/etc/php-fpm.conf)</span><br><span class="line">www      12241  0.0  0.4 183532  8612 ?        S    21:13   0:00 php-fpm: pool www</span><br><span class="line">www      12242  0.0  0.4 183532  8676 ?        S    21:13   0:00 php-fpm: pool www</span><br><span class="line">root     12244  0.0  0.0  14228  1080 pts/0    S+   21:13   0:00 grep --color=auto php-fpm</span><br><span class="line"># php-fpm stop</span><br><span class="line">Gracefully shutting down php-fpm  done</span><br></pre></td></tr></table></figure><h3 id="4-设置-PHP-FPM-执行的用户和用户组"><a href="#4-设置-PHP-FPM-执行的用户和用户组" class="headerlink" title="4. 设置 PHP-FPM 执行的用户和用户组"></a>4. 设置 PHP-FPM 执行的用户和用户组</h3><p>网站的权限管控也是一个很关键的事情，虽然说问题发生的几率微乎其微，但是我们很难保证我们的程序一定不会翻车被人 getshell。所以，我们要确保 PHP-FPM 只能操作自己网站的文件，而不能访问其它地方，这样可以最大化地减小网站万一被黑带来的危害。</p><p>这里一个安全性比较好的策略是，所有关于网站的程序都运行在 website 组中，用 nginx 用户运行 nginx，在 PHP-FPM 中配置不同用户来运行不同的网站，建议在生产环境中这么配置。</p><table><thead><tr><th style="text-align:left">程序</th><th style="text-align:center">group</th><th style="text-align:center">user</th></tr></thead><tbody><tr><td style="text-align:left">Nginx 服务器</td><td style="text-align:center">website</td><td style="text-align:center">nginx</td></tr><tr><td style="text-align:left">Typecho博客</td><td style="text-align:center">website</td><td style="text-align:center">site-1</td></tr><tr><td style="text-align:left">另一个PHP网站</td><td style="text-align:center">website</td><td style="text-align:center">site-2</td></tr><tr><td style="text-align:left">…</td><td style="text-align:center">website</td><td style="text-align:center">site-n</td></tr></tbody></table><p>当然，如果你比较懒的话，也可以只配置一个 site 的用户和配置，然后各个网站共用一个 pool 也是可以的，这取决于你对安全性的追求。<br>首先我们得有这个 website 用户组，这里用 groupadd website 来创建。</p><p>然后再把相应的用户创建出来，并且禁用这个用户登录的 shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -g website site-1</span><br></pre></td></tr></table></figure></p><p>再把你传到服务器上的网站目录的所有者和组改成 website:site-1 ，假设网站位于 /var/www/site-1，那就运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R website:site-1 /var/www/site-1</span><br></pre></td></tr></table></figure></p><p>然后再把文件权限改成 0755 ，它是一个八进制数，也就是 rwxr-xr-x ，只有自己才能写入，其它用户只有读取和执行的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 0755 /var/www/site-1</span><br></pre></td></tr></table></figure></p><p>我们需要新建一个 php-fpm 的 pool（也叫进程池） 配置，每次增加新的网站，我们都可以从默认的配置拷贝一份新的出来使用，如，我们这里拷贝一份 site-1.conf 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/php-7.2.7/etc/php-fpm.d/www.conf.default /usr/local/php-7.2.7/etc/php-fpm.d/site-1.conf</span><br></pre></td></tr></table></figure></p><p>然后打开文本编辑器编辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/php-7.2.7/etc/php-fpm.d/site1.conf</span><br></pre></td></tr></table></figure></p><p>忽略那些 ; 开头的注释，实际上我们需要改的只有这几行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; Start a new pool named &apos;www&apos;.</span><br><span class="line">; the variable $pool can be used in any directive and will be replaced by the</span><br><span class="line">; pool name (&apos;www&apos; here)</span><br><span class="line">[www]</span><br><span class="line"></span><br><span class="line">user = www</span><br><span class="line">group = www</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line">我们把 pool name 改一个名字，不同站点的名字不能一样，例如，我们可以把它改成 site-1 ，然后再修改一下 listen 的端口，保证不同的 pool 监听的连接不冲突，这是一个示例：</span><br><span class="line"></span><br><span class="line">[site-1]</span><br><span class="line"></span><br><span class="line">user = site-1</span><br><span class="line">group = website</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure></p><p>保存以后，运行 php-fpm start 就能启动网站服务了，当配置有变动时，我们调用 php-fpm reload 即可让新配置生效。</p><h3 id="5-设置开机自动启动-PHP-FPM"><a href="#5-设置开机自动启动-PHP-FPM" class="headerlink" title="5. 设置开机自动启动 PHP-FPM"></a>5. 设置开机自动启动 PHP-FPM</h3><p>从源码包里复制 php-fpm.service 到 /etc/systemd/system下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp /usr/local/src/php-7.2.7/sapi/fpm/php-fpm.service /etc/systemd/system</span><br></pre></td></tr></table></figure></p><p>这样也可以使用 service 来启动，关闭 php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># service php-fpm start</span><br><span class="line"># service php-fpm stop</span><br><span class="line"># service php-fpm reload</span><br></pre></td></tr></table></figure></p><p>参考文章：<br><a href="https://blog.izgq.net/archives/910/" target="_blank" rel="noopener">Ubuntu 16.04 编译安装 PHP 7.2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载安装包&quot;&gt;&lt;a href=&quot;#一、下载安装包&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装包&quot;&gt;&lt;/a&gt;一、下载安装包&lt;/h2&gt;&lt;p&gt;我们将压缩包下载到 /usr/local/src 目录下，进入目录&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="php" scheme="http://blog.hi-v.cn/categories/php/"/>
    
    
      <category term="ubuntu" scheme="http://blog.hi-v.cn/tags/ubuntu/"/>
    
      <category term="php" scheme="http://blog.hi-v.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04下编译安装nginx1.14</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/install-nginx-on-ubuntu.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/install-nginx-on-ubuntu.html</id>
    <published>2018-06-21T15:10:25.000Z</published>
    <updated>2018-07-01T08:13:53.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>我们将压缩包下载到 /usr/local/src 目录下，进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src</span><br></pre></td></tr></table></figure></p><h3 id="1-下载-Nginx-以及相关依赖"><a href="#1-下载-Nginx-以及相关依赖" class="headerlink" title="1. 下载 Nginx 以及相关依赖"></a>1. 下载 Nginx 以及相关依赖</h3><blockquote><p>下载 nginx:   wget <a href="http://nginx.org/download/nginx-1.14.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.14.0.tar.gz</a><br>下载 pcre:    wget <a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz" target="_blank" rel="noopener">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz</a><br>下载 openssl: wget <a href="https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz" target="_blank" rel="noopener">https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz</a><br>下载 zlib:    wget <a href="http://zlib.net/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">http://zlib.net/zlib-1.2.11.tar.gz</a></p></blockquote><h3 id="2-解压各个压缩包"><a href="#2-解压各个压缩包" class="headerlink" title="2. 解压各个压缩包"></a>2. 解压各个压缩包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx-1.14.0.tar.gz</span><br><span class="line">tar -zxf pcre-8.42.tar.gz</span><br><span class="line">tar -zxf openssl-1.1.1-pre8.tar.gz</span><br><span class="line">tar -zxf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="二、编译安装"><a href="#二、编译安装" class="headerlink" title="二、编译安装"></a>二、编译安装</h2><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.0</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.1-pre8</span><br></pre></td></tr></table></figure><p>编译后会有如下的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using PCRE library: ../pcre-8.42</span><br><span class="line">  + using OpenSSL library: ../openssl-1.1.1-pre8</span><br><span class="line">  + using zlib library: ../zlib-1.2.11</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3. 检查是否安装成功"></a>3. 检查是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: [emerg] getpwnam(&quot;www&quot;) failed</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed</span><br></pre></td></tr></table></figure><h3 id="4-更改用户，用户组"><a href="#4-更改用户，用户组" class="headerlink" title="4. 更改用户，用户组"></a>4. 更改用户，用户组</h3><p>上面第3步，提示 www 不存在，我们修改 www-data ,改未www<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># usermod -l www www-data   # 修改用户名 www-data 改为 www</span><br><span class="line"># groupmod -n www www-data  # 修改用户组名 www-data 改为 www</span><br></pre></td></tr></table></figure></p><p>再次执行校验，配置已没有问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><h3 id="5-启动-nginx"><a href="#5-启动-nginx" class="headerlink" title="5. 启动 nginx"></a>5. 启动 nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="6-其它命令"><a href="#6-其它命令" class="headerlink" title="6. 其它命令"></a>6. 其它命令</h3><p>上面介绍可以使用 nginx -t 来校验 nginx 的配置。<br>nginx 启动后，可以执行 nginx -s +命令，例如如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># nginx -s stop     #快速关闭nginx</span><br><span class="line"># nginx -s quit     #优雅关闭nginx. nginx 会在等待子进程处理完请求后关闭主进程</span><br><span class="line"># nginx -s reload   #重新加载配置文件</span><br><span class="line"># nginx -s reopen   #重新打开日志文件</span><br></pre></td></tr></table></figure></p><h3 id="7-制作-nginx-service"><a href="#7-制作-nginx-service" class="headerlink" title="7. 制作 nginx.service"></a>7. 制作 nginx.service</h3><p>根据 nginx 的安装目录，修改下面的脚本 [Service] 部分，并将其保存到文件 /lib/systemd/system/nginx.service<br>如果安装没有指定pid的安装位置，默认在安装目录logs的目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>这样就可以执行下面的命令来启动，关闭，重载 nginx 了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># service nginx start   #启动 nginx</span><br><span class="line"># service nginx stop    #关闭 nginx</span><br><span class="line"># service nginx reload  #重载 nginx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载安装包&quot;&gt;&lt;a href=&quot;#一、下载安装包&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装包&quot;&gt;&lt;/a&gt;一、下载安装包&lt;/h2&gt;&lt;p&gt;我们将压缩包下载到 /usr/local/src 目录下，进入目录&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="nginx" scheme="http://blog.hi-v.cn/categories/nginx/"/>
    
    
      <category term="ubuntu" scheme="http://blog.hi-v.cn/tags/ubuntu/"/>
    
      <category term="nginx" scheme="http://blog.hi-v.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo + Github快速搭建免费博客</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/free-blog-with-hexo-and-github.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/free-blog-with-hexo-and-github.html</id>
    <published>2018-06-20T12:31:59.000Z</published>
    <updated>2018-06-24T06:59:25.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账户。</p></blockquote><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>以下提供2个链接，自己可以对照安装。</p><ol><li>安装 Node.js<blockquote><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p></blockquote></li><li>安装 Git<blockquote><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></blockquote></li></ol><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>安装 Hexo 完成后，在指定目录下执行下列命令，Hexo 将会在指定文件夹中创建博客所需要的文件。<br>假定安装目录是 blog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog    # 在当前目录下创建 blog 文件夹，并在 blog 文件夹里初始化</span><br><span class="line">$ cd blog           # 切换到 blog 目录</span><br><span class="line">$ npm install       # 执行安装</span><br></pre></td></tr></table></figure></p><p>至此，博客就搭建完成。</p><h2 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h2><p>在博客目录下，执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g            #自动根据当前目录下文件,生成静态网页</span><br><span class="line">$ hexo s            #运行本地服务</span><br></pre></td></tr></table></figure></p><p>打开浏览器输入 localhost:4000 ,就可以看到博客已经运行起来了。</p><h2 id="同步博客到GitHub"><a href="#同步博客到GitHub" class="headerlink" title="同步博客到GitHub"></a>同步博客到GitHub</h2><ul><li><h3 id="注册并创建项目"><a href="#注册并创建项目" class="headerlink" title="注册并创建项目"></a>注册并创建项目</h3></li></ul><ol><li><p>注册github账号</p><blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></blockquote></li><li><p>创建一个新项目,项目名称必须是: 用户名.github.io</p></li><li>在新建的项目里，点击 Settings<img src="/blog/2018-06/free-blog-with-hexo-and-github/setting.png"></li><li>选择一个 theme<img src="/blog/2018-06/free-blog-with-hexo-and-github/theme.png">任意选择一个<img src="/blog/2018-06/free-blog-with-hexo-and-github/select_theme.png">这个时候访问一下你的链接，应该可以看到效果了。地址是 您的用户名.github.io</li></ol><ul><li><h3 id="同步博客"><a href="#同步博客" class="headerlink" title="同步博客"></a>同步博客</h3></li></ul><ol><li>修改博客配置文件 _config.yml</li></ol><img src="/blog/2018-06/free-blog-with-hexo-and-github/deploy.png"><ol start="2"><li>安装部署</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save  # 安装部署插件</span><br><span class="line"></span><br><span class="line">$ hexo d    # 部署到GitHub</span><br></pre></td></tr></table></figure><p>再次刷新博客地址，就可以看到了。 地址是 您的用户名.github.io</p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。<br>解析自己的域名，添加 cname 解析<br><img src="/blog/2018-06/free-blog-with-hexo-and-github/cname.jpg"><br>然后到你博客 根目录/source 目录下创建一个新文件CNAME<br>在里面写上你刚刚配置的路径，就直接在CNAME文件中写上这个地址就好了。</p><p>然后执行以下hexo g,hexo d，让后访问你自己的地址就可以跳转到博客了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>Hexo： <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.hi-v.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://blog.hi-v.cn/tags/github/"/>
    
  </entry>
  
</feed>
