<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘永振的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hi-v.cn/"/>
  <updated>2018-06-30T15:58:04.216Z</updated>
  <id>http://blog.hi-v.cn/</id>
  
  <author>
    <name>刘永振</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu16.04下编译安装nginx1.14</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/install-nginx-on-ubuntu.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/install-nginx-on-ubuntu.html</id>
    <published>2018-06-21T15:10:25.000Z</published>
    <updated>2018-06-30T15:58:04.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h2><p>我们将压缩包下载到 /usr/local/src 目录下，进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src</span><br></pre></td></tr></table></figure></p><h3 id="1-下载-Nginx-以及相关依赖"><a href="#1-下载-Nginx-以及相关依赖" class="headerlink" title="1. 下载 Nginx 以及相关依赖"></a>1. 下载 Nginx 以及相关依赖</h3><blockquote><p>下载 nginx:   wget <a href="http://nginx.org/download/nginx-1.14.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.14.0.tar.gz</a><br>下载 pcre:    wget <a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz" target="_blank" rel="noopener">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz</a><br>下载 openssl: wget <a href="https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz" target="_blank" rel="noopener">https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz</a><br>下载 zlib:    wget <a href="http://zlib.net/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">http://zlib.net/zlib-1.2.11.tar.gz</a></p></blockquote><h3 id="2-解压各个压缩包"><a href="#2-解压各个压缩包" class="headerlink" title="2. 解压各个压缩包"></a>2. 解压各个压缩包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx-1.14.0.tar.gz</span><br><span class="line">tar -zxf pcre-8.42.tar.gz</span><br><span class="line">tar -zxf openssl-1.1.1-pre8.tar.gz</span><br><span class="line">tar -zxf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure><h2 id="二、编译安装"><a href="#二、编译安装" class="headerlink" title="二、编译安装"></a>二、编译安装</h2><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.0</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.1-pre8</span><br></pre></td></tr></table></figure><p>编译后会有如下的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using PCRE library: ../pcre-8.42</span><br><span class="line">  + using OpenSSL library: ../openssl-1.1.1-pre8</span><br><span class="line">  + using zlib library: ../zlib-1.2.11</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3. 检查是否安装成功"></a>3. 检查是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: [emerg] getpwnam(&quot;www&quot;) failed</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed</span><br></pre></td></tr></table></figure><h3 id="4-更改用户，用户组"><a href="#4-更改用户，用户组" class="headerlink" title="4. 更改用户，用户组"></a>4. 更改用户，用户组</h3><p>上面第3步，提示 www 不存在，我们修改 www-data ,改未www<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># usermod -l www www-data   # 修改用户名 www-data 改为 www</span><br><span class="line"># groupmod -n www www-data  # 修改用户组名 www-data 改为 www</span><br></pre></td></tr></table></figure></p><p>再次执行校验，配置已没有问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><h3 id="5-启动-nginx"><a href="#5-启动-nginx" class="headerlink" title="5. 启动 nginx"></a>5. 启动 nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="6-其它命令"><a href="#6-其它命令" class="headerlink" title="6. 其它命令"></a>6. 其它命令</h3><p>上面介绍可以使用 nginx -t 来校验 nginx 的配置。<br>nginx 启动后，可以执行 nginx -s +命令，例如如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># nginx -s stop     #快速关闭nginx</span><br><span class="line"># nginx -s quit     #优雅关闭nginx. nginx 会在等待子进程处理完请求后关闭主进程</span><br><span class="line"># nginx -s reload   #重新加载配置文件</span><br><span class="line"># nginx -s reopen   #重新打开日志文件</span><br></pre></td></tr></table></figure></p><h3 id="7-制作-nginx-service"><a href="#7-制作-nginx-service" class="headerlink" title="7. 制作 nginx.service"></a>7. 制作 nginx.service</h3><p>根据 nginx 的安装目录，修改下面的脚本 [Service] 部分，并将其保存到文件 /lib/systemd/system/nginx.service<br>如果安装没有指定pid的安装位置，默认在安装目录logs的目录下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>这样就可以执行下面的命令来启动，关闭，重载 nginx 了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># service nginx start   #启动 nginx</span><br><span class="line"># service nginx stop    #关闭 nginx</span><br><span class="line"># service nginx reload  #重载 nginx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载安装包&quot;&gt;&lt;a href=&quot;#一、下载安装包&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装包&quot;&gt;&lt;/a&gt;一、下载安装包&lt;/h2&gt;&lt;p&gt;我们将压缩包下载到 /usr/local/src 目录下，进入目录&lt;br&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo + Github快速搭建免费博客</title>
    <link href="http://blog.hi-v.cn//blog/2018-06/free-blog-with-hexo-and-github.html"/>
    <id>http://blog.hi-v.cn//blog/2018-06/free-blog-with-hexo-and-github.html</id>
    <published>2018-06-20T12:31:59.000Z</published>
    <updated>2018-06-24T06:59:25.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账户。</p></blockquote><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>以下提供2个链接，自己可以对照安装。</p><ol><li>安装 Node.js<blockquote><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p></blockquote></li><li>安装 Git<blockquote><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></blockquote></li></ol><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>安装 Hexo 完成后，在指定目录下执行下列命令，Hexo 将会在指定文件夹中创建博客所需要的文件。<br>假定安装目录是 blog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog    # 在当前目录下创建 blog 文件夹，并在 blog 文件夹里初始化</span><br><span class="line">$ cd blog           # 切换到 blog 目录</span><br><span class="line">$ npm install       # 执行安装</span><br></pre></td></tr></table></figure></p><p>至此，博客就搭建完成。</p><h2 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h2><p>在博客目录下，执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g            #自动根据当前目录下文件,生成静态网页</span><br><span class="line">$ hexo s            #运行本地服务</span><br></pre></td></tr></table></figure></p><p>打开浏览器输入 localhost:4000 ,就可以看到博客已经运行起来了。</p><h2 id="同步博客到GitHub"><a href="#同步博客到GitHub" class="headerlink" title="同步博客到GitHub"></a>同步博客到GitHub</h2><ul><li><h3 id="注册并创建项目"><a href="#注册并创建项目" class="headerlink" title="注册并创建项目"></a>注册并创建项目</h3></li></ul><ol><li><p>注册github账号</p><blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></blockquote></li><li><p>创建一个新项目,项目名称必须是: 用户名.github.io</p></li><li>在新建的项目里，点击 Settings<img src="/blog/2018-06/free-blog-with-hexo-and-github/setting.png"></li><li>选择一个 theme<img src="/blog/2018-06/free-blog-with-hexo-and-github/theme.png">任意选择一个<img src="/blog/2018-06/free-blog-with-hexo-and-github/select_theme.png">这个时候访问一下你的链接，应该可以看到效果了。地址是 您的用户名.github.io</li></ol><ul><li><h3 id="同步博客"><a href="#同步博客" class="headerlink" title="同步博客"></a>同步博客</h3></li></ul><ol><li>修改博客配置文件 _config.yml</li></ol><img src="/blog/2018-06/free-blog-with-hexo-and-github/deploy.png"><ol start="2"><li>安装部署</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save  # 安装部署插件</span><br><span class="line"></span><br><span class="line">$ hexo d    # 部署到GitHub</span><br></pre></td></tr></table></figure><p>再次刷新博客地址，就可以看到了。 地址是 您的用户名.github.io</p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。<br>解析自己的域名，添加 cname 解析<br><img src="/blog/2018-06/free-blog-with-hexo-and-github/cname.jpg"><br>然后到你博客 根目录/source 目录下创建一个新文件CNAME<br>在里面写上你刚刚配置的路径，就直接在CNAME文件中写上这个地址就好了。</p><p>然后执行以下hexo g,hexo d，让后访问你自己的地址就可以跳转到博客了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>Hexo： <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.hi-v.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://blog.hi-v.cn/tags/github/"/>
    
  </entry>
  
</feed>
