{"meta":{"title":"刘永振的博客","subtitle":null,"description":null,"author":"刘永振","url":"http://blog.hi-v.cn"},"pages":[{"title":"about","date":"2018-06-23T06:32:03.000Z","updated":"2018-06-23T06:32:03.435Z","comments":true,"path":"about/index.html","permalink":"http://blog.hi-v.cn/about/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu16.04下编译安装nginx1.14","slug":"install-nginx-on-ubuntu","date":"2018-06-21T15:10:25.000Z","updated":"2018-06-30T15:58:04.216Z","comments":true,"path":"/blog/2018-06/install-nginx-on-ubuntu.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/install-nginx-on-ubuntu.html","excerpt":"","text":"一、下载安装包我们将压缩包下载到 /usr/local/src 目录下，进入目录1# cd /usr/local/src 1. 下载 Nginx 以及相关依赖 下载 nginx: wget http://nginx.org/download/nginx-1.14.0.tar.gz下载 pcre: wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz下载 openssl: wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz下载 zlib: wget http://zlib.net/zlib-1.2.11.tar.gz 2. 解压各个压缩包1234tar -zxf nginx-1.14.0.tar.gztar -zxf pcre-8.42.tar.gztar -zxf openssl-1.1.1-pre8.tar.gztar -zxf zlib-1.2.11.tar.gz 二、编译安装1. 编译12cd nginx-1.10.0./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.1-pre8 编译后会有如下的提示123456789101112131415161718Configuration summary + using PCRE library: ../pcre-8.42 + using OpenSSL library: ../openssl-1.1.1-pre8 + using zlib library: ../zlib-1.2.11 nginx path prefix: &quot;/usr/local/nginx&quot; nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot; nginx modules path: &quot;/usr/local/nginx/modules&quot; nginx configuration prefix: &quot;/usr/local/nginx/conf&quot; nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot; nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot; nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot; nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot; nginx http client request body temporary files: &quot;client_body_temp&quot; nginx http proxy temporary files: &quot;proxy_temp&quot; nginx http fastcgi temporary files: &quot;fastcgi_temp&quot; nginx http uwsgi temporary files: &quot;uwsgi_temp&quot; nginx http scgi temporary files: &quot;scgi_temp&quot; 2. 安装1# make &amp;&amp; make install 3. 检查是否安装成功1234# /usr/local/nginx/sbin/nginx -tnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: [emerg] getpwnam(&quot;www&quot;) failednginx: configuration file /usr/local/nginx/conf/nginx.conf test failed 4. 更改用户，用户组上面第3步，提示 www 不存在，我们修改 www-data ,改未www12# usermod -l www www-data # 修改用户名 www-data 改为 www# groupmod -n www www-data # 修改用户组名 www-data 改为 www 再次执行校验，配置已没有问题123# /usr/local/nginx/sbin/nginx -tnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful 5. 启动 nginx1# /usr/local/nginx/sbin/nginx 6. 其它命令上面介绍可以使用 nginx -t 来校验 nginx 的配置。nginx 启动后，可以执行 nginx -s +命令，例如如下命令1234# nginx -s stop #快速关闭nginx# nginx -s quit #优雅关闭nginx. nginx 会在等待子进程处理完请求后关闭主进程# nginx -s reload #重新加载配置文件# nginx -s reopen #重新打开日志文件 7. 制作 nginx.service根据 nginx 的安装目录，修改下面的脚本 [Service] 部分，并将其保存到文件 /lib/systemd/system/nginx.service如果安装没有指定pid的安装位置，默认在安装目录logs的目录下。123456789101112131415[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -tExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 这样就可以执行下面的命令来启动，关闭，重载 nginx 了123# service nginx start #启动 nginx# service nginx stop #关闭 nginx# service nginx reload #重载 nginx","categories":[],"tags":[],"keywords":[]},{"title":"使用Hexo + Github快速搭建免费博客","slug":"free-blog-with-hexo-and-github","date":"2018-06-20T12:31:59.000Z","updated":"2018-06-24T06:59:25.703Z","comments":true,"path":"/blog/2018-06/free-blog-with-hexo-and-github.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/free-blog-with-hexo-and-github.html","excerpt":"","text":"前言 使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账户。 安装 hexo在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 以下提供2个链接，自己可以对照安装。 安装 Node.js http://nodejs.cn/ 安装 Git https://git-scm.com/downloads 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 创建博客安装 Hexo 完成后，在指定目录下执行下列命令，Hexo 将会在指定文件夹中创建博客所需要的文件。假定安装目录是 blog123$ hexo init blog # 在当前目录下创建 blog 文件夹，并在 blog 文件夹里初始化$ cd blog # 切换到 blog 目录$ npm install # 执行安装 至此，博客就搭建完成。 运行博客在博客目录下，执行以下命令12$ hexo g #自动根据当前目录下文件,生成静态网页$ hexo s #运行本地服务 打开浏览器输入 localhost:4000 ,就可以看到博客已经运行起来了。 同步博客到GitHub 注册并创建项目 注册github账号 https://github.com/ 创建一个新项目,项目名称必须是: 用户名.github.io 在新建的项目里，点击 Settings 选择一个 theme 任意选择一个 这个时候访问一下你的链接，应该可以看到效果了。地址是 您的用户名.github.io 同步博客 修改博客配置文件 _config.yml 安装部署 123$ npm install hexo-deployer-git --save # 安装部署插件$ hexo d # 部署到GitHub 再次刷新博客地址，就可以看到了。 地址是 您的用户名.github.io 绑定个人域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。解析自己的域名，添加 cname 解析然后到你博客 根目录/source 目录下创建一个新文件CNAME在里面写上你刚刚配置的路径，就直接在CNAME文件中写上这个地址就好了。 然后执行以下hexo g,hexo d，让后访问你自己的地址就可以跳转到博客了。12$ hexo g$ hexo d 相关文档 Hexo： https://hexo.io/zh-cn/docs/","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hi-v.cn/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://blog.hi-v.cn/tags/github/"}],"keywords":[]}]}