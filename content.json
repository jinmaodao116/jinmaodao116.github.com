{"meta":{"title":"刘永振的博客","subtitle":null,"description":null,"author":"刘永振","url":"http://blog.hi-v.cn"},"pages":[{"title":"about","date":"2018-06-23T06:32:03.000Z","updated":"2018-06-23T06:32:03.435Z","comments":true,"path":"about/index.html","permalink":"http://blog.hi-v.cn/about/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu16.04下安装MySql8.0","slug":"install-mysql-on-ubuntu","date":"2018-06-22T15:10:25.000Z","updated":"2018-07-30T09:58:31.174Z","comments":true,"path":"/blog/2018-06/install-mysql-on-ubuntu.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/install-mysql-on-ubuntu.html","excerpt":"","text":"一、下载，安装官方下载地址：https://dev.mysql.com/downloads/mysql/ 最后两个选项是已经经过编译的文件。我们选择64位的文件(mysql-8.0.11-linux-glibc2.12-x86_64.tar)下载。我们将压缩包下载到 /usr/local/src 目录。解压文件 tar 文件，将会得到2个 tar.gz 文件1# tar xvf mysql-8.0.11-linux-glibc2.12-x86_64.tar 继续解压其中的不带 test 的文件1# tar zxvf mysql-8.0.11-linux-glibc2.12-x86_64.tar.gz 然后将解压出来的目录，重命名复制到 /usr/local/mysql12# cp -R mysql-8.0.11-linux-glibc2.12-x86_64 /usr/local/mysql# cd /usr/local/mysql 然后进入 /usr/local/mysql 进行安装12345# cd /usr/local/mysql# mkdir mysql-files# chown mysql:mysql mysql-files# chmod 750 mysql-files# ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data basedir：安装目录路径datadir：数据库数据的根路径initialize：生成随机密码，使用-initialize-insecure生成空密码。默认帐号root。datadir: 数据库data存储目录 上述命令安装完成后，会有类似于下发的提示，告知你随机生成的 root 账户的密码，如：tHPie-2CQoGP 1A temporary password is generated for root@localhost: tHPie-2CQoGP 然后再继续执行以下命令 1234567# ./bin/mysql_ssl_rsa_setup# cp support-files/mysql.server /etc/init.d/mysql.server``` 到此，mysql 已经安装结束。## 二、启动关闭mysql service mysql.server start #启动mysqlservice mysql.server stop #关闭mysql12## 三、设置开机启动 systemctl enable mysql.server1234## 四、修改MySQL root密码当你用系统随机生成的密码登录MySQL后，系统会提示你，要先进行修改root账户的密码。 mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.123修改密码ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;; alter user ‘root‘@’localhost’ IDENTIFIED BY ‘123456’123456789由于Mysql8修改了密码的加密方式，默认为 caching_sha2_password ，这将导致一些客户端，如果没有升级话，将无法进行远程登录|Host|User|plugin||:---:|:---:|:---:||localhost|root|caching_sha2_password|不过，密码的加密方式我们是可以进行制定修改的。我们将root的密码，修改为原来的 mysql_native_password 方式 alter user ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’12345## 五、修改默认的密码加密方式当使用 creat user 创建新用户时，默认会采用 caching_sha2_password 对密码进行加密。不过，默认的加密方式，也是可以进行修改的。首先，先查看 my.cnf 的加载顺序 /usr/local/mysql/bin/mysql –verbose –help | grep -A 1 ‘Default options’12345&gt;Default options are read from the following files in the given order: /etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf 我们在数据库的安装目录，去创建 my.cnf cd /usr/local/mysqlmkdir etcvi my.cnf` 在 my.cnf 文件中，添加如下 [mysqld] default_authentication_plugin=mysql_native_password 然后重启MySQL 相关文档 https://dev.mysql.com/doc/refman/8.0/en/binary-installation.html","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.hi-v.cn/tags/ubuntu/"},{"name":"mysql","slug":"mysql","permalink":"http://blog.hi-v.cn/tags/mysql/"}],"keywords":[]},{"title":"ubuntu16.04下编译安装PHP7.2","slug":"install-php7-2-on-ubuntu","date":"2018-06-22T13:21:47.000Z","updated":"2018-07-01T08:13:53.214Z","comments":true,"path":"/blog/2018-06/install-php7-2-on-ubuntu.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/install-php7-2-on-ubuntu.html","excerpt":"","text":"一、下载安装包我们将压缩包下载到 /usr/local/src 目录下，进入目录1# cd /usr/local/src 1. 下载 PHP 下载 PHP7.2.7: wget http://cn2.php.net/distributions/php-7.2.7.tar.gz 2. 下载安装依赖一般来说，这种需要源码编译安装的软件，安装之前需要准备好编译环境以及程序需要依赖的库。首先我们准备编译环境，在 Ubuntu 16.04 LTS 中，默认并没有自带 C 和 C++ 的构建环境，我们安装一个叫 build-essential 的包即可，另外，PHP 还需要 bison re2c 和 pkg-config 才能安装，我们可以直接通过 apt 安装它们：1# apt install build-essential bison re2c pkg-config -y 接下来需要准备 PHP-7.2.7 的依赖包，大部分我们都可以通过 apt 来安装，唯一有一点要注意的是，Ubuntu 16.04 LTS 镜像源的 libzip 版本太老了，我们需要手动下一个新版本，才能让 PHP 的 zip 扩展支持加密的 zip 文件的操作。 安装依赖的命令：1# apt install build-essential bison re2c pkg-config libxml2-dev libbz2-dev libssl-dev libcurl4-openssl-dev libjpeg-dev libpng12-dev libfreetype6-dev libgmp-dev libreadline6-dev libxslt1-dev 如果安装过程提示类似于 Package *** is not available 时，要先更新一下源1# apt-get update 上面的安装依赖没有安装 libzip-dev ，接下来手动编译安装 libzip如果没有用 PHP 来处理加密 zip 的需求的话，也可以直接用 apt 默认的 libzip 包，刚刚的命令没有带上，我们需要到 libzip 的官网下一个，编译的时候另外指定：我们还是把它下载到 /usr/local/src 目录下 12345# cd /usr/local/src# wget https://libzip.org/download/libzip-1.5.1.tar.gz# tar -zxf libzip-1.5.1.tar.gz# cd libzip-1.5.1# mkdir build &amp;&amp; cd build &amp;&amp; cmake .. &amp;&amp; make &amp;&amp; make install 最新版的libzip 需要 cmake，如果没有 cmake，可以使用以下的命令安装 cmake1# apt install cmake libzip 的安装说明，可参照源码包里的 INSTALL.md 文档，或者官网的 github 上的说明https://github.com/nih-at/libzip/blob/master/INSTALL.md 二、 编译安装1. 编译接下来就是最重要的运行 ./configure 生成 makefile 了，不多说，直接上我调整好的套路。如果没有下载源码的话，请将 –with-libzip=../libzip-1.5.1 \\ 替换成 –with-libzip \\ （注意 \\ 之前一定有一个空格！）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# tar -zxf php-7.2.7.tar.gz# cd php-7.2.7# ./configure \\ --prefix=/usr/local/php-7.2.7 \\ --enable-fpm \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --enable-inline-optimization \\ --disable-debug \\ --disable-rpath \\ --enable-shared \\ --with-xmlrpc \\ --with-pcre-regex \\ --with-sqlite3 \\ --with-zlib \\ --enable-bcmath \\ --with-iconv \\ --with-bz2 \\ --with-openssl \\ --enable-calendar \\ --with-curl \\ --with-cdb \\ --enable-dom \\ --enable-exif \\ --enable-fileinfo \\ --enable-filter \\ --with-pcre-dir \\ --enable-ftp \\ --with-gd \\ --with-openssl-dir \\ --with-jpeg-dir \\ --with-png-dir \\ --with-zlib-dir \\ --with-freetype-dir \\ --enable-gd-jis-conv \\ --with-gettext \\ --with-gmp \\ --with-mhash \\ --enable-json \\ --enable-mbstring \\ --enable-mbregex \\ --enable-mbregex-backtrack \\ --with-libmbfl \\ --with-onig \\ --enable-pdo \\ --with-mysqli=mysqlnd \\ --with-pdo-mysql=mysqlnd \\ --with-pdo-sqlite \\ --with-readline \\ --enable-session \\ --enable-shmop \\ --enable-simplexml \\ --enable-sockets \\ --enable-sysvmsg \\ --enable-sysvsem \\ --enable-sysvshm \\ --enable-wddx \\ --with-libxml-dir \\ --with-xsl \\ --enable-zip \\ --enable-mysqlnd-compression-support \\ --with-pear \\ --enable-opcache 看到如下的提示，说明编译成功了123456789101112131415161718192021222324252627282930313233Generating filesconfigure: creating ./config.statuscreating main/internal_functions.ccreating main/internal_functions_cli.c+--------------------------------------------------------------------+| License: || This software is subject to the PHP License, available in this || distribution in the file LICENSE. By continuing this installation || process, you are bound by the terms of this license agreement. || If you do not agree with the terms of this license, you must abort || the installation process at this point. |+--------------------------------------------------------------------+Thank you for using PHP.config.status: creating php7.specconfig.status: creating main/build-defs.hconfig.status: creating scripts/phpizeconfig.status: creating scripts/man1/phpize.1config.status: creating scripts/php-configconfig.status: creating scripts/man1/php-config.1config.status: creating sapi/cli/php.1config.status: creating sapi/fpm/php-fpm.confconfig.status: creating sapi/fpm/www.confconfig.status: creating sapi/fpm/init.d.php-fpmconfig.status: creating sapi/fpm/php-fpm.serviceconfig.status: creating sapi/fpm/php-fpm.8config.status: creating sapi/fpm/status.htmlconfig.status: creating sapi/cgi/php-cgi.1config.status: creating ext/phar/phar.1config.status: creating ext/phar/phar.phar.1config.status: creating main/php_config.hconfig.status: executing default commands 2. 安装在 PHP 源码目录，执行安装命令，如下12# cd php-7.2.7# make &amp;&amp; make install 如果在make 过程出错的话，要执行一下 make clean 后再重新 make 到这一步，PHP 已经安装成功了。 三、 配置 PHP1. 配置环境变量要在命令行里面直接通过 php 之类的命令直接运行 php ，我们需要将 bin 目录加入到系统的环境变量中，方法是：1vim /etc/profile 在文件最末尾加上：12PATH=$PATH:/usr/local/php-7.2.7/binexport PATH 保存以后，执行 source /etc/profile 使环境变量生效。测试一下：1php -v 配置无误的话我们可以得到这样的输出123PHP 7.2.7 (cli) (built: Jul 1 2018 14:15:54) ( NTS )Copyright (c) 1997-2018 The PHP GroupZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies 2. 配置 php-fpm增加 php-fpm 命令，需要复制源码包里的文件12# cp /usr/local/src/php-7.2.7/sapi/fpm/init.d.php-fpm /usr/local/bin/php-fpm# chmod +x /usr/local/bin/php-fpm 3. 初始化 PHP 和 PHP-FPM 的配置查看一下 php.ini 的配置目录，可以看到 php.ini 目录指向 /usr/local/php-7.2.7/lib12# php -i | grep php.iniConfiguration File (php.ini) Path =&gt; /usr/local/php-7.2.7/lib 然后先把默认的配置拷贝一下：123cp /usr/local/src/php-7.2.7/php.ini-production /usr/local/php-7.2.7/php.inicp /usr/local/php-7.2.7/etc/php-fpm.conf.default /usr/local/php-7.2.7/etc/php-fpm.confcp /usr/local/php-7.2.7/etc/php-fpm.d/www.conf.default /usr/local/php-7.2.7/etc/php-fpm.d/www.conf 此时，已经可以用 php-fpm 命令来启动，关闭 php-fpm 了 123456789# php-fpm startStarting php-fpm done# ps aux|grep php-fpmroot 12240 0.0 0.4 183532 8604 ? Ss 21:13 0:00 php-fpm: master process (/usr/local/php-7.2.7/etc/php-fpm.conf)www 12241 0.0 0.4 183532 8612 ? S 21:13 0:00 php-fpm: pool wwwwww 12242 0.0 0.4 183532 8676 ? S 21:13 0:00 php-fpm: pool wwwroot 12244 0.0 0.0 14228 1080 pts/0 S+ 21:13 0:00 grep --color=auto php-fpm# php-fpm stopGracefully shutting down php-fpm done 4. 设置 PHP-FPM 执行的用户和用户组网站的权限管控也是一个很关键的事情，虽然说问题发生的几率微乎其微，但是我们很难保证我们的程序一定不会翻车被人 getshell。所以，我们要确保 PHP-FPM 只能操作自己网站的文件，而不能访问其它地方，这样可以最大化地减小网站万一被黑带来的危害。 这里一个安全性比较好的策略是，所有关于网站的程序都运行在 website 组中，用 nginx 用户运行 nginx，在 PHP-FPM 中配置不同用户来运行不同的网站，建议在生产环境中这么配置。 程序 group user Nginx 服务器 website nginx Typecho博客 website site-1 另一个PHP网站 website site-2 … website site-n 当然，如果你比较懒的话，也可以只配置一个 site 的用户和配置，然后各个网站共用一个 pool 也是可以的，这取决于你对安全性的追求。首先我们得有这个 website 用户组，这里用 groupadd website 来创建。 然后再把相应的用户创建出来，并且禁用这个用户登录的 shell：1useradd -s /sbin/nologin -g website site-1 再把你传到服务器上的网站目录的所有者和组改成 website:site-1 ，假设网站位于 /var/www/site-1，那就运行：1chown -R website:site-1 /var/www/site-1 然后再把文件权限改成 0755 ，它是一个八进制数，也就是 rwxr-xr-x ，只有自己才能写入，其它用户只有读取和执行的权限：1chmod -R 0755 /var/www/site-1 我们需要新建一个 php-fpm 的 pool（也叫进程池） 配置，每次增加新的网站，我们都可以从默认的配置拷贝一份新的出来使用，如，我们这里拷贝一份 site-1.conf 。1cp /usr/local/php-7.2.7/etc/php-fpm.d/www.conf.default /usr/local/php-7.2.7/etc/php-fpm.d/site-1.conf 然后打开文本编辑器编辑：1vim /usr/local/php-7.2.7/etc/php-fpm.d/site1.conf 忽略那些 ; 开头的注释，实际上我们需要改的只有这几行1234567891011121314151617; Start a new pool named &apos;www&apos;.; the variable $pool can be used in any directive and will be replaced by the; pool name (&apos;www&apos; here)[www]user = wwwgroup = wwwlisten = 127.0.0.1:9000我们把 pool name 改一个名字，不同站点的名字不能一样，例如，我们可以把它改成 site-1 ，然后再修改一下 listen 的端口，保证不同的 pool 监听的连接不冲突，这是一个示例：[site-1]user = site-1group = websitelisten = 127.0.0.1:9000 保存以后，运行 php-fpm start 就能启动网站服务了，当配置有变动时，我们调用 php-fpm reload 即可让新配置生效。 5. 设置开机自动启动 PHP-FPM从源码包里复制 php-fpm.service 到 /etc/systemd/system下1# cp /usr/local/src/php-7.2.7/sapi/fpm/php-fpm.service /etc/systemd/system 这样也可以使用 service 来启动，关闭 php-fpm123# service php-fpm start# service php-fpm stop# service php-fpm reload 参考文章：Ubuntu 16.04 编译安装 PHP 7.2","categories":[{"name":"php","slug":"php","permalink":"http://blog.hi-v.cn/categories/php/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.hi-v.cn/tags/ubuntu/"},{"name":"php","slug":"php","permalink":"http://blog.hi-v.cn/tags/php/"}],"keywords":[{"name":"php","slug":"php","permalink":"http://blog.hi-v.cn/categories/php/"}]},{"title":"ubuntu16.04下编译安装nginx1.14","slug":"install-nginx-on-ubuntu","date":"2018-06-21T15:10:25.000Z","updated":"2018-07-01T08:13:53.220Z","comments":true,"path":"/blog/2018-06/install-nginx-on-ubuntu.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/install-nginx-on-ubuntu.html","excerpt":"","text":"一、下载安装包我们将压缩包下载到 /usr/local/src 目录下，进入目录1# cd /usr/local/src 1. 下载 Nginx 以及相关依赖 下载 nginx: wget http://nginx.org/download/nginx-1.14.0.tar.gz下载 pcre: wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.tar.gz下载 openssl: wget https://www.openssl.org/source/openssl-1.1.1-pre8.tar.gz下载 zlib: wget http://zlib.net/zlib-1.2.11.tar.gz 2. 解压各个压缩包1234tar -zxf nginx-1.14.0.tar.gztar -zxf pcre-8.42.tar.gztar -zxf openssl-1.1.1-pre8.tar.gztar -zxf zlib-1.2.11.tar.gz 二、编译安装1. 编译12cd nginx-1.10.0./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.1-pre8 编译后会有如下的提示123456789101112131415161718Configuration summary + using PCRE library: ../pcre-8.42 + using OpenSSL library: ../openssl-1.1.1-pre8 + using zlib library: ../zlib-1.2.11 nginx path prefix: &quot;/usr/local/nginx&quot; nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot; nginx modules path: &quot;/usr/local/nginx/modules&quot; nginx configuration prefix: &quot;/usr/local/nginx/conf&quot; nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot; nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot; nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot; nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot; nginx http client request body temporary files: &quot;client_body_temp&quot; nginx http proxy temporary files: &quot;proxy_temp&quot; nginx http fastcgi temporary files: &quot;fastcgi_temp&quot; nginx http uwsgi temporary files: &quot;uwsgi_temp&quot; nginx http scgi temporary files: &quot;scgi_temp&quot; 2. 安装1# make &amp;&amp; make install 3. 检查是否安装成功1234# /usr/local/nginx/sbin/nginx -tnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: [emerg] getpwnam(&quot;www&quot;) failednginx: configuration file /usr/local/nginx/conf/nginx.conf test failed 4. 更改用户，用户组上面第3步，提示 www 不存在，我们修改 www-data ,改未www12# usermod -l www www-data # 修改用户名 www-data 改为 www# groupmod -n www www-data # 修改用户组名 www-data 改为 www 再次执行校验，配置已没有问题123# /usr/local/nginx/sbin/nginx -tnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful 5. 启动 nginx1# /usr/local/nginx/sbin/nginx 6. 其它命令上面介绍可以使用 nginx -t 来校验 nginx 的配置。nginx 启动后，可以执行 nginx -s +命令，例如如下命令1234# nginx -s stop #快速关闭nginx# nginx -s quit #优雅关闭nginx. nginx 会在等待子进程处理完请求后关闭主进程# nginx -s reload #重新加载配置文件# nginx -s reopen #重新打开日志文件 7. 制作 nginx.service根据 nginx 的安装目录，修改下面的脚本 [Service] 部分，并将其保存到文件 /lib/systemd/system/nginx.service如果安装没有指定pid的安装位置，默认在安装目录logs的目录下。123456789101112131415[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -tExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 这样就可以执行下面的命令来启动，关闭，重载 nginx 了123# service nginx start #启动 nginx# service nginx stop #关闭 nginx# service nginx reload #重载 nginx","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.hi-v.cn/categories/nginx/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.hi-v.cn/tags/ubuntu/"},{"name":"nginx","slug":"nginx","permalink":"http://blog.hi-v.cn/tags/nginx/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"http://blog.hi-v.cn/categories/nginx/"}]},{"title":"使用Hexo + Github快速搭建免费博客","slug":"free-blog-with-hexo-and-github","date":"2018-06-20T12:31:59.000Z","updated":"2018-06-24T06:59:25.703Z","comments":true,"path":"/blog/2018-06/free-blog-with-hexo-and-github.html","link":"","permalink":"http://blog.hi-v.cn/blog/2018-06/free-blog-with-hexo-and-github.html","excerpt":"","text":"前言 使用 Hexo, Github 搭建博客前，首先您需要安装 Node.js、Git，并拥有一个 Github 的账户。 安装 hexo在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 以下提供2个链接，自己可以对照安装。 安装 Node.js http://nodejs.cn/ 安装 Git https://git-scm.com/downloads 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 创建博客安装 Hexo 完成后，在指定目录下执行下列命令，Hexo 将会在指定文件夹中创建博客所需要的文件。假定安装目录是 blog123$ hexo init blog # 在当前目录下创建 blog 文件夹，并在 blog 文件夹里初始化$ cd blog # 切换到 blog 目录$ npm install # 执行安装 至此，博客就搭建完成。 运行博客在博客目录下，执行以下命令12$ hexo g #自动根据当前目录下文件,生成静态网页$ hexo s #运行本地服务 打开浏览器输入 localhost:4000 ,就可以看到博客已经运行起来了。 同步博客到GitHub 注册并创建项目 注册github账号 https://github.com/ 创建一个新项目,项目名称必须是: 用户名.github.io 在新建的项目里，点击 Settings 选择一个 theme 任意选择一个 这个时候访问一下你的链接，应该可以看到效果了。地址是 您的用户名.github.io 同步博客 修改博客配置文件 _config.yml 安装部署 123$ npm install hexo-deployer-git --save # 安装部署插件$ hexo d # 部署到GitHub 再次刷新博客地址，就可以看到了。 地址是 您的用户名.github.io 绑定个人域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。解析自己的域名，添加 cname 解析然后到你博客 根目录/source 目录下创建一个新文件CNAME在里面写上你刚刚配置的路径，就直接在CNAME文件中写上这个地址就好了。 然后执行以下hexo g,hexo d，让后访问你自己的地址就可以跳转到博客了。12$ hexo g$ hexo d 相关文档 Hexo： https://hexo.io/zh-cn/docs/","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hi-v.cn/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://blog.hi-v.cn/tags/github/"}],"keywords":[]}]}